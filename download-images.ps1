# Ensure the ImportExcel module is loadedImport-Module ImportExcel -ErrorAction Stop# Get the current directory$currentDir = Get-Location# Prompt for the file name$fileName = Read-Host "Enter the spreadsheet filename (e.g., users.csv or users.xlsx)"$filePath = Join-Path -Path $currentDir -ChildPath $fileName# Check if file existsif (-not (Test-Path -Path $filePath)) {    Write-Error "‚ùå File '$fileName' not found in the current directory."    exit}# Prompt for output folder$outputFolderName = Read-Host "Enter the name of the output folder for images"$outputFolder = Join-Path -Path $currentDir -ChildPath $outputFolderName# Create output folder if neededif (-not (Test-Path -Path $outputFolder)) {    New-Item -Path $outputFolder -ItemType Directory -Force | Out-Null    Write-Host "üìÅ Created folder: $outputFolder"}# Prompt for dynamic column headers$picCol = Read-Host "Enter the column header for the profile picture URL (default: profile_pic_url)"if ([string]::IsNullOrWhiteSpace($picCol)) { $picCol = "profile_pic_url" }$userCol = Read-Host "Enter the column header for the username (default: username)"if ([string]::IsNullOrWhiteSpace($userCol)) { $userCol = "username" }# Load the spreadsheet$data =    if ($fileName.ToLower().EndsWith(".xlsx")) {        Import-Excel -Path $filePath    } elseif ($fileName.ToLower().EndsWith(".csv")) {        Import-Csv -Path $filePath    } else {        Write-Error "‚ùå Unsupported file type. Use .csv or .xlsx."        exit    }# Download each image using dynamic headersforeach ($row in $data) {    $username = $row.$userCol    $url = $row.$picCol    if ($username -and $url) {        try {            # Extract file extension            $extension = [System.IO.Path]::GetExtension($url.Split('?')[0])            if (-not $extension) { $extension = ".jpg" }            $filename = "$username$extension"            $filePath = Join-Path -Path $outputFolder -ChildPath $filename            Invoke-WebRequest -Uri $url -OutFile $filePath            Write-Host "‚úÖ Downloaded: $filename"        } catch {            Write-Warning "‚ö†Ô∏è Failed to download image for '$username': $_"        }    }}